Есть много разных движков и кажды вижок поддерживает разные возможности из ECMAScript
Для браузеров движки не предоставляют доступ к памяти и процессору низкоуровневый поэтому он безопасный
!crossorigin если добавят оба сайта в свой код - тогда можно будет обмениваться данными даже с разных доменов!
С помощью тернарного оператора лучше только определять переменные
Иначе говоря, оператор ?? возвращает первый аргумент, если он не null/undefined, иначе второй.
ВМЕСТО console.log ДЛЯ ОТЛАДКИ МОЖНО ИСПОЛЬЗОВАТЬ ИНСТРУМЕНТЫ РАЗРАБОТЧИКА
Должно быть мало уровней вложенности (https://habr.com/ru/post/15479/)
Самодокументируемый код можно получить с помощью вынесения в отдельные функции
Это важное ограничение: результатом obj1 + obj2 (или другой математической операции) не может быть другой объект!
Про Symbol(вкратце используется для редактирования чужих библиотек чтобы одновременно не сломать их) - https://nickbulljs.medium.com/%D0%B7%D0%B0%D1%87%D0%B5%D0%BC-%D0%BE%D0%BD%D0%B8-%D0%BD%D1%83%D0%B6%D0%BD%D1%8B-%D0%B2-javascript-symbol-iterator-generator-d5d186b4f1bd
А вот Symbol.toPrimitive уже «четче», этот метод обязан возвращать примитив, иначе будет ошибка.
(для преобразования объекта в примитив)
Классы обертки нужны чтобы использовать методы
Если нужно узнать символ по позиции лучше использовать квадратные скобки
Можно создать итерируемый объект чтобы он работал с for of причем можно настроить его работу как угодно он не будет работать также как и for in, Array.from может создать массив из итерируемого объекта или псевдомассива
Встроенные прототипы лучше не изменять
https://learn.javascript.ru/private-protected-properties-methods - ВАЖНО!!!
МНОГИЕ НЕ ДОЧИТЫВАЮТ ДО КОНЦА

!!!!!!!!!!!JSDoc!!!!!!!!!!! Комментарии, объясняющие решение, очень важны. Они помогают продолжать разработку в правильном направлении.
Описывайте архитектуру (UML)

