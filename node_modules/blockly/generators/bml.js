const bmlGenerator = new Blockly.Generator('BML');

bmlGenerator.PRECEDENCE = 0;

/*Blockly.defineBlocksWithJsonArray([{
  "type": "object",
  "message0": "{ %1 %2 }",
  "args0": [
    {
      "type": "input_dummy"
    },
    {
      "type": "input_statement",
      "name": "MEMBERS"
    }
  ],
  "output": null,
  "colour": 230,
},
{
  "type": "member",
  "message0": "%1 %2 %3",
  "args0": [
    {
      "type": "field_input",
      "name": "MEMBER_NAME",
      "text": ""
    },
    {
      "type": "field_label",
      "name": "COLON",
      "text": ":"
    },
    {
      "type": "input_value",
      "name": "MEMBER_VALUE"
    }
  ],
  "previousStatement": null,
  "nextStatement": null,
  "colour": 230,
}]);

var bmlToolbox = `
<xml id="toolbox" style="display: none">
<block type="object"/>
<block type="member"></block>
<block type="math_number"><field name="NUM">0</field></block>
<block type="text"><field name="TEXT"/></block>
<block type="logic_boolean"><field name="BOOL">TRUE</field></block>
<block type="logic_null"/>
<block type="lists_create_with"><mutation items="3"/></block>
</xml>
`;

bmlGenerator['logic_null'] = function(block) {
  return ['null', bmlGenerator.PRECEDENCE];
};

bmlGenerator['text'] = function(block) {
  var textValue = block.getFieldValue('TEXT');
  var code = '"' + textValue + '"';
  return [code, bmlGenerator.PRECEDENCE];
};

bmlGenerator['math_number'] = function(block) {
  const code = Number(block.getFieldValue('NUM'));
  return [code, bmlGenerator.PRECEDENCE];
};

bmlGenerator['logic_boolean'] = function(block) {
  const code = (block.getFieldValue('BOOL') == 'TRUE') ? 'true' : 'false';
  return [code, bmlGenerator.PRECEDENCE];
};

bmlGenerator['member'] = function(block) {
  const name = block.getFieldValue('MEMBER_NAME');
  const value = bmlGenerator.valueToCode(block, 'MEMBER_VALUE',
      bmlGenerator.PRECEDENCE);
  const code = '"' + name + '": ' + value;
  return code;
};

bmlGenerator['lists_create_with'] = function(block) {
  const values = [];
  for (var i = 0; i < block.itemCount_; i++) {
    let valueCode = bmlGenerator.valueToCode(block, 'ADD' + i,
    	bmlGenerator.PRECEDENCE);
    if (valueCode) {
      values.push(valueCode);
    }
  }
  const valueString = values.join(',\n');
  const indentedValueString =
      bmlGenerator.prefixLines(valueString, bmlGenerator.INDENT);
  const codeString = '[\n' + indentedValueString + '\n]';
  return [codeString, bmlGenerator.PRECEDENCE];
};

bmlGenerator['object'] = function(block) {
  const statement_members =
      bmlGenerator.statementToCode(block, 'MEMBERS');
  const code = '{\n' + statement_members + '\n}';
  return [code, bmlGenerator.PRECEDENCE];
};

bmlGenerator.scrub_ = function(block, code, opt_thisOnly) {
  const nextBlock =
      block.nextConnection && block.nextConnection.targetBlock();
  let nextCode = '';
  if (nextBlock) {
      nextCode =
          opt_thisOnly ? '' : ',\n' + bmlGenerator.blockToCode(nextBlock);
  }
  return code +  nextCode;
};*/

const blocks = Blockly.common.createBlockDefinitionsFromJsonArray([{
  "type": "block",
  "message0": "block with attrs %1 with inside %2",
  "args0": [
    {
      "type": "input_value",
      "name": "ATTRS",
      "check": "attrs"
    },
    {
      "type": "input_value",
      "name": "VALUE",
      "check": "group"
    }
  ],
  //"output": "block",
  "nextStatement": ["set","block"],
  "previousStatement": ["set", "block"],
  "colour": 50
},
{
  "type": "model",
  "message0": "model",
  "message1": "%1",
  "args1": [
    {"type": "input_statement", "name": "DO", "check": "set_in_model"}
  ],
  "nextStatement": "location",
  //"output": "model",
  "colour": 100
},
{
  "type": "location",
  "message0": "location",
  "message1": "%1",
  "args1": [
    {"type": "input_statement", "name": "DO", "check": "set_in_location"}
  ],
  "nextStatement": "location",
  "previousStatement": ["location","model"],
  //"output": "location",
  "colour": 150
},
{
  "type": "group",
  "message0": "group",
  "message1": "%1",
  "args1": [
    {"type": "input_statement", "name": "DO", "check": ["block","set"]}
  ],
  "output": "group",
  "colour": 150
},
{
  "type": "attrs",
  "message0": "attrs",
  "message1": "%1",
  "args1": [
    {"type": "input_statement", "name": "ATTRS", "check": "attr"}
  ],
  //"previousStatement": "attrs",
  //"nextStatement": "attrs",
  "output": "attrs",
  "colour": 100
},
{
  "type": "attr",
  "message0": "attribute %1 to %2",
  "args0": [
    {
      "type": "field_dropdown",
      "name": "FIELDNAME",
      "options": [
        [ "id", "id" ],
        [ "by", "by" ]
      ]
    },
    {
      "type": "input_value",
      "name": "VALUE",
      "check": "text"
    }
  ],
  "previousStatement": "attr",
  "nextStatement": "attr",
  //"output": "attr"
},
{
  "type": "set",
  "message0": "set with attrs %1 with inside %2",
  "args0": [
    {
      "type": "input_value",
      "name": "ATTRS",
      "check": "attrs"
    },
    {
      "type": "input_value",
      "name": "VALUE",
      "check": "group"
    }
  ],
  //"output": "set",
  "nextStatement": ["set"],
  "previousStatement": ["set","set_in_model", "set_in_location"],
  "colour": 300
},
{
  "type": "text",
  "message0": "\" %1 \"",
  "args0": [
    {
      "type": "field_input",
      "name": "TEXT"
    }
  ],
  "output": "text"
}]);

/*{
  "type": "block",
  "message0": "block with attrs %1 with inside %2",
  "args0": [
    {
      "type": "input_value",
      "name": "ATTRS",
      "check": "attrs"
    },
    {
      "type": "input_value",
      "name": "VALUE",
      "check": ["block", "set"]
    }
  ],
  //"output": "block",
  "nextStatement": ["set","block"],
  "previousStatement": ["set", "block"],
  "colour": 50
},*/

/*blocks['block'] = {
  init: function() {
    this.appendValueInput('ATTRS')
        .setCheck('attrs')
        .appendField('block with attrs');
    this.appendValueInput('VALUE')
        .setCheck(["block", "set"])
        .appendField('with inside');
    this.setColour(50);
    this.setPreviousStatement(true, ["set","block"]);
    this.setNextStatement(true, ["set","block"]);
  }
};*/

Blockly.common.defineBlocks(blocks);

var bmlToolbox = `
<xml id="toolbox" style="display: none">
<block type="block"/>
<block type="model"/>
<block type="location"/>
<block type="group"/>
<block type="attrs"/>
<block type="attr"/>
<block type="set"/>
<block type="text"/>
</xml>
`;