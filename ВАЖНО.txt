this вычисляется динмически поэтому можно присвоить разным объектам глобальную функцию и она будет выдавать разные значения this
У стрелочных функций нет «this». Стрелочные функции особенные: у них нет своего «собственного» this. Если мы используем this внутри стрелочной функции, то его значение берётся из внешней «нормальной» функции.
let user = {}; // пользователь без адреса
alert( user?.address?.street ); // undefined (без ошибки)
let html = document.querySelector('.elem')?.innerHTML; // будет undefined, если элемента нет
Нам следует использовать ?. только там, где нормально, что чего-то не существует.
К примеру, если, в соответствии с логикой нашего кода, объект user должен существовать, но address является необязательным, то нам следует писать user.address?.street, но не user?.address?.street.
В этом случае, если вдруг user окажется undefined, мы увидим программную ошибку по этому поводу и исправим её. В противном случае, если слишком часто использовать ?., ошибки могут замалчиваться там, где это неуместно, и их будет сложнее отлаживать.
// ReferenceError: user is not defined
user?.address;
Как было сказано ранее, ?. немедленно останавливает вычисление, если левая часть не существует.
Так что если после ?. есть какие-то вызовы функций или операции, то они не произойдут.